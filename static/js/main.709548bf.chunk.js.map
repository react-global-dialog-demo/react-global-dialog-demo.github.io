{"version":3,"sources":["components/Dialog/dialog.module.css","components/Dialog/dialog.js","components/Dialog/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","dialogMask","open","show","dialog","dialogTitle","dialogContent","closeBtn","Dialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","content","_this2","setState","setTimeout","_this3","react_default","a","createElement","className","css","onClick","close","bind","React","Component","div","document","body","appendChild","ReactDom","render","App","Date","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,WAAA,2BAAAC,KAAA,qBAAAC,KAAA,qBAAAC,OAAA,uBAAAC,YAAA,4BAAAC,cAAA,8BAAAC,SAAA,mNC0CHC,cAtCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTf,MAAM,EACNC,MAAM,EACNe,MAAO,GACPC,QAAS,IANET,oEAUdQ,EAAOC,GAAS,IAAAC,EAAAP,KACjBA,KAAKQ,SAAS,CAACnB,MAAM,EAAMgB,MAAOA,EAAOC,QAASA,IAClDG,WAAW,WACPF,EAAKC,SAAS,CAAClB,MAAM,KACtB,oCAGC,IAAAoB,EAAAV,KACJA,KAAKQ,SAAS,CAAClB,MAAM,IACrBmB,WAAW,WACPC,EAAKF,SAAS,CAACnB,MAAM,KACtB,sCAIH,OAAOsB,EAAAC,EAAAC,cAAA,OACHC,UAAWC,IAAI3B,WAAa,KAAOY,KAAKI,MAAMf,KAAO0B,IAAI1B,KAAO,IAAM,KAAOW,KAAKI,MAAMd,KAAOyB,IAAIzB,KAAO,KAC1GqB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIxB,QAChBoB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIvB,aAAcQ,KAAKI,MAAMC,MACzCM,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIrB,SAAUsB,QAAShB,KAAKiB,MAAMC,KAAKlB,OAAvD,MAEJW,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAItB,eAAgBO,KAAKI,MAAME,kBAjC1Ca,IAAMC,WCKrBC,EAAMC,SAAST,cAAc,OACnCS,SAASC,KAAKC,YAAYH,GAC1B,IAEe9B,EAFAkC,IAASC,OAAOf,EAAAC,EAAAC,cAACtB,EAAD,MAAW8B,GCK3BM,mLARP,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMrB,EAAOL,KAAK,gBAAiB,IAAIsC,MAAQC,oBAAhE,uBALET,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAOf,EAAAC,EAAAC,cAACuB,EAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.709548bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogMask\":\"dialog_dialogMask__1JHQA\",\"open\":\"dialog_open__35INs\",\"show\":\"dialog_show__irXr_\",\"dialog\":\"dialog_dialog__1eIdL\",\"dialogTitle\":\"dialog_dialogTitle__-0JsC\",\"dialogContent\":\"dialog_dialogContent__2TD8E\",\"closeBtn\":\"dialog_closeBtn__1p-rl\"};","import React from 'react';\nimport css from './dialog.module.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            show: false,\n            title: '',\n            content: ''\n        }\n    }\n\n    show(title, content) {\n        this.setState({open: true, title: title, content: content})\n        setTimeout(() => {\n            this.setState({show: true});\n        }, 10);\n    }\n\n    close() {\n        this.setState({show: false});\n        setTimeout(() => {\n            this.setState({open: false});\n        }, 210);\n    }\n\n    render() {\n        return <div\n            className={css.dialogMask + ' ' + (this.state.open ? css.open : '') + ' ' + (this.state.show ? css.show : '')}>\n            <div className={css.dialog}>\n                <div className={css.dialogTitle}>{this.state.title}\n                    <div className={css.closeBtn} onClick={this.close.bind(this)}>X</div>\n                </div>\n                <div className={css.dialogContent}>{this.state.content}</div>\n            </div>\n        </div>\n    }\n\n}\n\nexport default Dialog;","/**\n *  author: lisper <leyapin@gmail.com>\n */\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport Dialog from './dialog';\n\nconst div = document.createElement('div');\ndocument.body.appendChild(div);\nconst dialog = ReactDom.render(<Dialog/>, div);\n\nexport default dialog;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Dialog from '../Dialog';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button onClick={() => Dialog.show('Current Time', (new Date()).toLocaleString())}>Open Dialog</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}